# coding: utf-8

"""
    Wikimedia

    This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 

    The version of the OpenAPI document: 1.0.0
    Created by: http://mediawiki.org/wiki/REST_API
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wikimedia_python_sdk import schemas  # noqa: F401


class Summary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "extract",
            "dir",
            "lang",
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            dir = schemas.StrSchema
            extract = schemas.StrSchema
            lang = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def coordinates() -> typing.Type['SummaryCoordinates']:
                return SummaryCoordinates
            displaytitle = schemas.StrSchema
            extract_html = schemas.StrSchema
        
            @staticmethod
            def originalimage() -> typing.Type['Originalimage']:
                return Originalimage
            pageid = schemas.IntSchema
        
            @staticmethod
            def thumbnail() -> typing.Type['Thumbnail']:
                return Thumbnail
            timestamp = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "dir": dir,
                "extract": extract,
                "lang": lang,
                "description": description,
                "coordinates": coordinates,
                "displaytitle": displaytitle,
                "extract_html": extract_html,
                "originalimage": originalimage,
                "pageid": pageid,
                "thumbnail": thumbnail,
                "timestamp": timestamp,
            }
    
    extract: MetaOapg.properties.extract
    dir: MetaOapg.properties.dir
    lang: MetaOapg.properties.lang
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dir"]) -> MetaOapg.properties.dir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extract"]) -> MetaOapg.properties.extract: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> 'SummaryCoordinates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displaytitle"]) -> MetaOapg.properties.displaytitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extract_html"]) -> MetaOapg.properties.extract_html: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalimage"]) -> 'Originalimage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageid"]) -> MetaOapg.properties.pageid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> 'Thumbnail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "dir", "extract", "lang", "description", "coordinates", "displaytitle", "extract_html", "originalimage", "pageid", "thumbnail", "timestamp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dir"]) -> MetaOapg.properties.dir: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extract"]) -> MetaOapg.properties.extract: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lang"]) -> MetaOapg.properties.lang: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union['SummaryCoordinates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displaytitle"]) -> typing.Union[MetaOapg.properties.displaytitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extract_html"]) -> typing.Union[MetaOapg.properties.extract_html, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalimage"]) -> typing.Union['Originalimage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageid"]) -> typing.Union[MetaOapg.properties.pageid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union['Thumbnail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "dir", "extract", "lang", "description", "coordinates", "displaytitle", "extract_html", "originalimage", "pageid", "thumbnail", "timestamp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        extract: typing.Union[MetaOapg.properties.extract, str, ],
        dir: typing.Union[MetaOapg.properties.dir, str, ],
        lang: typing.Union[MetaOapg.properties.lang, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        coordinates: typing.Union['SummaryCoordinates', schemas.Unset] = schemas.unset,
        displaytitle: typing.Union[MetaOapg.properties.displaytitle, str, schemas.Unset] = schemas.unset,
        extract_html: typing.Union[MetaOapg.properties.extract_html, str, schemas.Unset] = schemas.unset,
        originalimage: typing.Union['Originalimage', schemas.Unset] = schemas.unset,
        pageid: typing.Union[MetaOapg.properties.pageid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        thumbnail: typing.Union['Thumbnail', schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Summary':
        return super().__new__(
            cls,
            *args,
            extract=extract,
            dir=dir,
            lang=lang,
            title=title,
            description=description,
            coordinates=coordinates,
            displaytitle=displaytitle,
            extract_html=extract_html,
            originalimage=originalimage,
            pageid=pageid,
            thumbnail=thumbnail,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )

from wikimedia_python_sdk.model.originalimage import Originalimage
from wikimedia_python_sdk.model.summary_coordinates import SummaryCoordinates
from wikimedia_python_sdk.model.thumbnail import Thumbnail
