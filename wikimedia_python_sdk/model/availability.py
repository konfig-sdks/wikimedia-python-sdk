# coding: utf-8

"""
    Wikimedia

    This API provides cacheable and straightforward access to Wikimedia content and data, in machine-readable formats. ### Global Rules - Limit your clients to no more than 200 requests/s to this API.   Each API endpoint's documentation may detail more specific usage limits. - Set a unique `User-Agent` or `Api-User-Agent` header that   allows us to contact you quickly. Email addresses or URLs   of contact pages work well.  By using this API, you agree to Wikimedia's  [Terms of Use](https://wikimediafoundation.org/wiki/Terms_of_Use) and [Privacy Policy](https://wikimediafoundation.org/wiki/Privacy_policy). Unless otherwise specified in the endpoint documentation below, content accessed via this API is licensed under the [CC-BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/)  and [GFDL](https://www.gnu.org/copyleft/fdl.html) licenses, and you irrevocably agree to release modifications or additions made through this API under these licenses.  See https://www.mediawiki.org/wiki/REST_API for background and details. ### Endpoint documentation Please consult each endpoint's documentation for details on: - Licensing information for the specific type of content   and data served via the endpoint. - Stability markers to inform you about development status and   change policy, according to   [our API version policy](https://www.mediawiki.org/wiki/API_versioning). - Endpoint specific usage limits. 

    The version of the OpenAPI document: 1.0.0
    Created by: http://mediawiki.org/wiki/REST_API
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from wikimedia_python_sdk import schemas  # noqa: F401


class Availability(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "on_this_day",
            "in_the_news",
            "most_read",
            "picture_of_the_day",
            "todays_featured_article",
        }
        
        class properties:
        
            @staticmethod
            def in_the_news() -> typing.Type['AvailabilityInTheNews']:
                return AvailabilityInTheNews
        
            @staticmethod
            def most_read() -> typing.Type['AvailabilityMostRead']:
                return AvailabilityMostRead
        
            @staticmethod
            def on_this_day() -> typing.Type['AvailabilityOnThisDay']:
                return AvailabilityOnThisDay
        
            @staticmethod
            def picture_of_the_day() -> typing.Type['AvailabilityPictureOfTheDay']:
                return AvailabilityPictureOfTheDay
        
            @staticmethod
            def todays_featured_article() -> typing.Type['AvailabilityTodaysFeaturedArticle']:
                return AvailabilityTodaysFeaturedArticle
            __annotations__ = {
                "in_the_news": in_the_news,
                "most_read": most_read,
                "on_this_day": on_this_day,
                "picture_of_the_day": picture_of_the_day,
                "todays_featured_article": todays_featured_article,
            }
    
    on_this_day: 'AvailabilityOnThisDay'
    in_the_news: 'AvailabilityInTheNews'
    most_read: 'AvailabilityMostRead'
    picture_of_the_day: 'AvailabilityPictureOfTheDay'
    todays_featured_article: 'AvailabilityTodaysFeaturedArticle'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["in_the_news"]) -> 'AvailabilityInTheNews': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["most_read"]) -> 'AvailabilityMostRead': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["on_this_day"]) -> 'AvailabilityOnThisDay': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["picture_of_the_day"]) -> 'AvailabilityPictureOfTheDay': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["todays_featured_article"]) -> 'AvailabilityTodaysFeaturedArticle': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["in_the_news", "most_read", "on_this_day", "picture_of_the_day", "todays_featured_article", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["in_the_news"]) -> 'AvailabilityInTheNews': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["most_read"]) -> 'AvailabilityMostRead': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["on_this_day"]) -> 'AvailabilityOnThisDay': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["picture_of_the_day"]) -> 'AvailabilityPictureOfTheDay': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["todays_featured_article"]) -> 'AvailabilityTodaysFeaturedArticle': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["in_the_news", "most_read", "on_this_day", "picture_of_the_day", "todays_featured_article", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        on_this_day: 'AvailabilityOnThisDay',
        in_the_news: 'AvailabilityInTheNews',
        most_read: 'AvailabilityMostRead',
        picture_of_the_day: 'AvailabilityPictureOfTheDay',
        todays_featured_article: 'AvailabilityTodaysFeaturedArticle',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Availability':
        return super().__new__(
            cls,
            *args,
            on_this_day=on_this_day,
            in_the_news=in_the_news,
            most_read=most_read,
            picture_of_the_day=picture_of_the_day,
            todays_featured_article=todays_featured_article,
            _configuration=_configuration,
            **kwargs,
        )

from wikimedia_python_sdk.model.availability_in_the_news import AvailabilityInTheNews
from wikimedia_python_sdk.model.availability_most_read import AvailabilityMostRead
from wikimedia_python_sdk.model.availability_on_this_day import AvailabilityOnThisDay
from wikimedia_python_sdk.model.availability_picture_of_the_day import AvailabilityPictureOfTheDay
from wikimedia_python_sdk.model.availability_todays_featured_article import AvailabilityTodaysFeaturedArticle
